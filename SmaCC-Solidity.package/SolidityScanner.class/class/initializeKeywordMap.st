generated-initialization
initializeKeywordMap
	keywordMap := Dictionary new.
	#(#(116 'address' 73) #(116 'anonymous' 96) #(116 'as' 92) #(116 'assembly' 76) #(116 'bool' 59) #(116 'break' 71) #(116 'byte' 105) #(116 'bytes' 105) #(116 'bytes1' 105) #(116 'bytes10' 105) #(116 'bytes11' 105) #(116 'bytes12' 105) #(116 'bytes13' 105) #(116 'bytes14' 105) #(116 'bytes15' 105) #(116 'bytes16' 105) #(116 'bytes17' 105) #(116 'bytes18' 105) #(116 'bytes19' 105) #(116 'bytes2' 105) #(116 'bytes20' 105) #(116 'bytes21' 105) #(116 'bytes22' 105) #(116 'bytes23' 105) #(116 'bytes24' 105) #(116 'bytes25' 105) #(116 'bytes26' 105) #(116 'bytes27' 105) #(116 'bytes28' 105) #(116 'bytes29' 105) #(116 'bytes3' 105) #(116 'bytes30' 105) #(116 'bytes31' 105) #(116 'bytes32' 105) #(116 'bytes4' 105) #(116 'bytes5' 105) #(116 'bytes6' 105) #(116 'bytes7' 105) #(116 'bytes8' 105) #(116 'bytes9' 105) #(116 'constant' 35) #(116 'continue' 78) #(116 'contract' 82) #(116 'days' 88) #(116 'delete' 21) #(116 'do' 77) #(116 'else' 37) #(116 'enum' 84) #(116 'ether' 46) #(116 'event' 97) #(116 'external' 99) #(116 'false' 113) #(116 'finney' 17) #(116 'for' 62) #(116 'from' 85) #(116 'function' 56) #(116 'hours' 87) #(116 'if' 66) #(116 'import' 91) #(116 'indexed' 60) #(116 'int' 106) #(116 'int104' 106) #(116 'int112' 106) #(116 'int120' 106) #(116 'int128' 106) #(116 'int136' 106) #(116 'int144' 106) #(116 'int152' 106) #(116 'int16' 106) #(116 'int160' 106) #(116 'int168' 106) #(116 'int176' 106) #(116 'int184' 106) #(116 'int192' 106) #(116 'int200' 106) #(116 'int208' 106) #(116 'int216' 106) #(116 'int224' 106) #(116 'int232' 106) #(116 'int24' 106) #(116 'int240' 106) #(116 'int248' 106) #(116 'int256' 106) #(116 'int32' 106) #(116 'int40' 106) #(116 'int48' 106) #(116 'int56' 106) #(116 'int64' 106) #(116 'int72' 106) #(116 'int8' 106) #(116 'int80' 106) #(116 'int88' 106) #(116 'int96' 106) #(116 'interface' 86) #(116 'internal' 36) #(116 'is' 95) #(116 'let' 69) #(116 'library' 83) #(116 'mapping' 63) #(116 'memory' 98) #(116 'minutes' 58) #(116 'modifier' 94) #(116 'new' 68) #(116 'payable' 102) #(116 'pragma' 52) #(116 'private' 104) #(116 'public' 103) #(116 'pure' 100) #(116 'return' 72) #(116 'returns' 57) #(116 'seconds' 53) #(116 'storage' 93) #(116 'string' 54) #(116 'struct' 79) #(116 'szabo' 16) #(116 'throw' 67) #(116 'true' 113) #(116 'uint' 107) #(116 'uint104' 107) #(116 'uint112' 107) #(116 'uint120' 107) #(116 'uint128' 107) #(116 'uint136' 107) #(116 'uint144' 107) #(116 'uint152' 107) #(116 'uint16' 107) #(116 'uint160' 107) #(116 'uint168' 107) #(116 'uint176' 107) #(116 'uint184' 107) #(116 'uint192' 107) #(116 'uint200' 107) #(116 'uint208' 107) #(116 'uint216' 107) #(116 'uint224' 107) #(116 'uint232' 107) #(116 'uint24' 107) #(116 'uint240' 107) #(116 'uint248' 107) #(116 'uint256' 107) #(116 'uint32' 107) #(116 'uint40' 107) #(116 'uint48' 107) #(116 'uint56' 107) #(116 'uint64' 107) #(116 'uint72' 107) #(116 'uint8' 107) #(116 'uint80' 107) #(116 'uint88' 107) #(116 'uint96' 107) #(116 'using' 61) #(116 'var' 55) #(116 'view' 101) #(116 'weeks' 89) #(116 'wei' 15) #(116 'while' 74) #(116 'years' 90))
		do: [ :each | 
			(keywordMap at: each first ifAbsentPut: [ Dictionary new ])
				at: (each at: 2)
				put: each last ].
	^ keywordMap