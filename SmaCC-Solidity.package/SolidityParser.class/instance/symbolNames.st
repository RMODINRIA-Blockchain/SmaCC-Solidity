generated
symbolNames
	^ #('"/"' '"%"' '"**"' '"++"' '"-"' '"*"' '"--"' '"^"' '"&"' '"<<"' '">>"' '"+"' '"delete"' '"|"' '"szabo"' '"finney"' '"ether"' '"seconds"' '"=:"' '"wei"' '">="' '"~"' '"["' '"("' '"."' '"pragma"' '"!"' '"^="' '"&="' '"<<="' '">>="' '"="' '"|="' '"+="' '")"' '"constant"' '"internal"' '"else"' '","' '"-="' '";"' '"!="' '"<"' '"<="' '">"' '"&&"' '"=="' '"minutes"' '"/="' '"%="' '":"' '"?"' '"||"' '"*="' '"function"' '"returns"' '"indexed"' '"if"' '"hours"' '"var"' '"while"' '"mapping"' '"=>"' '"]"' '"address"' '"bool"' '"_"' '"for"' '"default"' '"switch"' '"let"' '":="' '"new"' '"case"' '"string"' '"do"' '"continue"' '"break"' '"return"' '"throw"' '"assembly"' '"}"' '"contract"' '"library"' '"interface"' '"from"' '"using"' '"is"' '"days"' '"weeks"' '"years"' '"import"' '"as"' '"{"' '"pure"' '"event"' '"anonymous"' '"view"' '"struct"' '"enum"' '"modifier"' '"storage"' '"payable"' '"public"' '"private"' '"external"' '"memory"' '<byte>' '<int>' '<uint>' '<stringLiteral>' '<decimalnumber>' '<hexnumber>' '<realnumber>' '<hexliteral>' '<booleanliteral>' '<fixed>' '<ufixed>' '<identifier>' '<nestedids>' '<whitespace>' '<comment>' '( Version)*' 'LiteralString' 'LiteralHexa' 'LiteralNumber' 'LiteralBoolean' 'Literal' 'LiteralIdentifier' 'Version' 'LiteralNestedIdentifier' 'ContractDefinition' 'LiteralHexaString' 'LiteralHexaNumber' 'ImportDirective' 'PragmaDirective' 'LiteralDecimalNumber' 'LiteralRealNumber' 'LiteralEtherAmount' 'B e g i n' '( SourceUnit)*' '( SourceUnit)' 'LiteralUnit' '( LiteralDecimalNumber LiteralRealNumber LiteralRealNumber)' '( "^" ">=" ">" "<" "<=" "~")' '( ( "^" ">=" ">" "<" "<=" "~"))' '( ( "^" ">=" ">" "<" "<=" "~"))?' '( <decimalnumber> <realnumber>)' '( "." ( <decimalnumber> <realnumber>))' '( "." ( <decimalnumber> <realnumber>))*' '( "as" LiteralIdentifier)' '( "as" LiteralIdentifier)?' '( "*" LiteralIdentifier)' '( "," LiteralIdentifier ( "as" LiteralIdentifier)?)' '( "," LiteralIdentifier ( "as" LiteralIdentifier)?)*' '( "contract" "library" "interface")' 'InheritanceSpecifier' '( "," InheritanceSpecifier)' '( "," InheritanceSpecifier)*' '( "is" InheritanceSpecifier ( "," InheritanceSpecifier)*)' '( "is" InheritanceSpecifier ( "," InheritanceSpecifier)*)?' '( ContractPart)' '( ContractPart)*' 'StateVariableDeclaration' 'UsingForDeclaration' 'StructDefinition' 'UserModifierDefinition' 'FunctionDefinition' 'EventDefinition' 'EnumDefinition' 'UserDefinedTypeName' 'ExpressionList' '( "(" ExpressionList ")")' '( "(" ExpressionList ")")?' '( "constant" "pure" "view")' 'ModifierFunctionImmuable' 'ModifierFunctionPayable' '( "public" "private")' 'ModifierPrivacy' '( "internal" "external")' 'ModifierVisibility' 'ModifierStateVariableVisibility' 'UserModifierInvocation' 'ModifierFunctionDefinition' 'StateVariableDeclarationMod' '( "memory" "storage")' 'ModifierStorage' 'SourceUnit' '( ParameterList)' '( ParameterList)?' 'Block' '( ExpressionList)' '( ExpressionList)?' '( "(" ( ExpressionList)? ")")' '( "(" ( ExpressionList)? ")")?' 'IndexedParameterList' '"anonymous"?' 'EnumValue' '( EnumValue)' '( EnumValue)?' '( "," EnumValue)' '( "," EnumValue)*' 'VariableDeclaration' '( VariableDeclaration ";")' '( VariableDeclaration ";")*' '( VariableDeclaration ";" ( VariableDeclaration ";")*)' '( VariableDeclaration ";" ( VariableDeclaration ";")*)?' 'TypeName' '( "*" TypeName)' 'ElementaryTypeName' 'MappingTypeName' 'ArrayTypeName' 'FunctionTypeName' '( Expression)' '( Expression)?' '( LiteralNestedIdentifier LiteralIdentifier)' 'Factor' 'Expression' 'Statement' 'ContractPart' 'RootSourceSol' '( "address" "bool" "string" "var" <int> <uint> <byte> <fixed> <ufixed>)' '( ModifierStorage)' '( ModifierStorage)?' 'IdentifierList' '( "var" IdentifierList)' '( "=" Expression)' '( "=" Expression)?' 'VariableDefinition' '( StateVariableDeclarationMod)' '( StateVariableDeclarationMod)?' '( LiteralIdentifier)' '( LiteralIdentifier)?' '( "," TypeName ( ModifierStorage)? ( LiteralIdentifier)?)' '( "," TypeName ( ModifierStorage)? ( LiteralIdentifier)?)*' '( TypeName ( ModifierStorage)? ( LiteralIdentifier)? ( "," TypeName ( ModifierStorage)? ( LiteralIdentifier)?)*)' '( TypeName ( ModifierStorage)? ( LiteralIdentifier)? ( "," TypeName ( ModifierStorage)? ( LiteralIdentifier)?)*)?' 'TypeNameList' '( ModifierVisibility ModifierFunctionImmuable ModifierFunctionPayable)' '( ( ModifierVisibility ModifierFunctionImmuable ModifierFunctionPayable))' '( ( ModifierVisibility ModifierFunctionImmuable ModifierFunctionPayable))*' '( "returns" TypeNameList)' '( "returns" TypeNameList)?' '( ModifierFunctionDefinition)' '( ModifierFunctionDefinition)*' '( "returns" ParameterList)' '( "returns" ParameterList)?' '( ";" Block)' '"indexed"?' 'IndexedParameter' '( "," IndexedParameter)' '( "," IndexedParameter)*' '( IndexedParameter ( "," IndexedParameter)*)' '( IndexedParameter ( "," IndexedParameter)*)?' 'Parameter' '( "," Parameter)' '( "," Parameter)*' '( Parameter ( "," Parameter)*)' '( Parameter ( "," Parameter)*)?' '( Statement)' '( Statement)*' 'IfStatement' 'WhileStatement' 'ForStatement' 'InlineAssemblyStatement' 'DoWhileStatement' 'PlaceholderStatement' 'Continue' 'Break' 'Return' 'Throw' '( DoWhileStatement PlaceholderStatement Continue Break Return Throw VariableDefinition Expression)' '( "else" Statement)' '( "else" Statement)?' 'SimpleStatement' '( SimpleStatement)' '( SimpleStatement)?' '( LiteralString)' '( LiteralString)?' 'AssemblyBlock' '( ( LiteralIdentifier)? ",")' '( ( LiteralIdentifier)? ",")*' 'OperationPostfix' 'OperationPrefix' 'OperationsUnary' '( "++" "--")' '( "!" "~" "delete" "++" "--" "+" "-")' 'ParenthesisExpressionFollowup' '( ParenthesisExpressionFollowup)' '( ParenthesisExpressionFollowup)?' 'ExpressionParenthesis' 'OperationPower' 'OperationMultiplication' 'OperationDivision' 'OperationModule' 'OperationAddition' 'OperationSubstraction' 'OperationArithmetic' 'OperationBitShift' 'OperationBitAnd' 'OperationBitXor' 'OperationBitOr' 'OperationBit' '( "<<" ">>")' 'OperationCompare' 'OperationEquals' 'OperationNotEquals' 'OperationAnd' 'OperationOr' 'OperationTernary' 'OperationComparingLogic' '( "<" ">" "<=" ">=")' '( "=" "|=" "^=" "&=" "<<=" ">>=" "+=" "-=" "*=" "/=" "%=")' 'OperationAssign' 'TupleExpression' 'TermExpression' 'OptionalMemberArrayAccess' 'OptionalFunctionCall' 'OptionalVariableDeclaration' '( OptionalFunctionCall OptionalVariableDeclaration)' '( OptionalFunctionCall OptionalVariableDeclaration)?' '( "." TermExpression)' '( TermExpression)' '( TermExpression)?' '( OptionalFunctionCall ( TermExpression)?)' '( "[" Expression "]" ( TermExpression)?)' '( ( "." TermExpression) ( OptionalFunctionCall ( TermExpression)?) ( "[" Expression "]" ( TermExpression)?))' '( ( "." TermExpression) ( OptionalFunctionCall ( TermExpression)?) ( "[" Expression "]" ( TermExpression)?))?' 'NewExpression' '( "." LiteralNestedIdentifier)' '( "." LiteralIdentifier)' '( "[" ( Expression)? "]")' '( ( "." LiteralNestedIdentifier) ( "." LiteralIdentifier) ( "[" ( Expression)? "]"))' '( ( "." LiteralNestedIdentifier) ( "." LiteralIdentifier) ( "[" ( Expression)? "]"))*' 'FunctionCallArguments' '( "(" FunctionCallArguments ")")' 'NameValueList' '( NameValueList)' '( NameValueList)?' '( ( ModifierStorage)? LiteralIdentifier)' '( "," Expression)' '( "," Expression)*' '( "," LiteralIdentifier ":" Expression)' '( "," LiteralIdentifier ":" Expression)*' '( ",")' '( ",")?' '( "," ( Expression)?)' '( "," ( Expression)?)*' '( Expression ( "," ( Expression)?)*)' '( Expression ( "," ( Expression)?)*)?' '( "," ( Expression)?)+' 'AssemblyStatement' '( AssemblyStatement)' '( AssemblyStatement)*' 'AssemblyIf' 'AssemblyFor' 'AssemblySwitch' 'AssemblyExpression' 'AssemblyValue' 'FunctionalAssemblyExpression' 'AssemblyLocalBinding' 'AssemblyAssignment' 'AssemblyLabel' '( "," AssemblyExpression)' '( "," AssemblyExpression)*' 'AssemblyExpressionList' 'AssemblyCase' '( AssemblyCase)' '( AssemblyCase)+' 'AssemblyAssignable' '( AssemblyExpressionList)' '( AssemblyExpressionList)?' 'E O F' 'error' '( Version)' 'ParameterList')