generated
symbolNames
	^ #('"-"' '"*"' '"/"' '"%"' '">>"' '"+"' '"**"' '">="' '"|"' '"^"' '"&"' '"<<"' '"++"' '"."' '"pragma"' '";"' '"import"' '"["' '"=:"' '"<="' '"--"' '"delete"' '"after"' '"!"' '"~"' '">"' '"|="' '"^="' '"&="' '"<<="' '","' '"="' '">>="' '"internal"' '"external"' '"constant"' '"payable"' '"else"' '"+="' '"&&"' '"=="' '"!="' '"<"' '"?"' '"||"' '"as"' '"-="' '"*="' '"/="' '"%="' '":"' '"("' '"from"' '"true"' '"false"' '"wei"' '"szabo"' '"var"' '"new"' '"finney"' '"do"' '"continue"' '"break"' '"return"' '"{"' '"ether"' '"bool"' '"string"' '"let"' '":="' '"years"' '"address"' '"throw"' '"seconds"' '"minutes"' '"hours"' '"days"' '"weeks"' '"assembly"' '"using"' '"for"' '"struct"' '"modifier"' '"public"' '"_"' '"function"' '"}"' '"contract"' '"library"' '"is"' '")"' '"private"' '"memory"' '"storage"' '"if"' '"while"' '"=>"' '"returns"' '"mapping"' '"event"' '"]"' '"anonymous"' '"indexed"' '"enum"' '<byte>' '<int>' '<uint>' '<stringLiteral>' '<decimalnumber>' '<hexnumber>' '<hexliteral>' '<identifier>' '<idlist>' '<keypairid>' '<fixed>' '<ufixed>' '<whitespace>' '<comment>' '( "." <decimalnumber>)' '( "as" <identifier>)' '( "as" <identifier>)?' '( "*" <identifier>)' '( "," <identifier> ( "as" <identifier>)?)' '( "," <identifier> ( "as" <identifier>)?)*' '( "contract" "library")' 'InheritanceSpecifier' '( "," InheritanceSpecifier)' '( "," InheritanceSpecifier)*' '( "is" InheritanceSpecifier ( "," InheritanceSpecifier)*)' '( "is" InheritanceSpecifier ( "," InheritanceSpecifier)*)?' 'ContractPart' 'ContractPart*' 'StateVariableDeclaration' 'UsingForDeclaration' 'StructDefinition' 'ModifierDefinition' 'FunctionDefinition' 'EventDefinition' 'EnumDefinition' 'UserDefinedTypeName' 'ExpressionList' '( "(" ExpressionList ")")' '( "(" ExpressionList ")")?' '( "^" ">=" ">" "<" "<=")?' '( "public" "internal" "private")' '( "public" "internal" "private")?' 'Expression' '( "=" Expression)' '( "=" Expression)?' '( "*" TypeName)' 'VariableDeclaration' '( VariableDeclaration ";")' '( VariableDeclaration ";")*' '( VariableDeclaration ";" ( VariableDeclaration ";")*)' '( VariableDeclaration ";" ( VariableDeclaration ";")*)?' 'ParameterList' 'ParameterList?' 'Block' '<identifier>?' 'FunctionDefinitionMod' '( FunctionDefinitionMod)' '( FunctionDefinitionMod)*' '( "returns" ParameterList)' '( "returns" ParameterList)?' '( ";" Block)' 'FunctionCall' 'IndexedParameterList' '"anonymous"?' 'EnumValue' 'EnumValue?' '( "," EnumValue)' '( "," EnumValue)*' '"indexed"?' '( "," TypeName "indexed"? <identifier>?)' '( "," TypeName "indexed"? <identifier>?)*' '( TypeName "indexed"? <identifier>? ( "," TypeName "indexed"? <identifier>?)*)' '( TypeName "indexed"? <identifier>? ( "," TypeName "indexed"? <identifier>?)*)?' '( "," TypeName <identifier>?)' '( "," TypeName <identifier>?)*' '( TypeName <identifier>? ( "," TypeName <identifier>?)*)' '( TypeName <identifier>? ( "," TypeName <identifier>?)*)?' '( "," TypeName)' '( "," TypeName)*' '( TypeName ( "," TypeName)*)' '( TypeName ( "," TypeName)*)?' 'TypeNameList' 'StorageLocation' 'StorageLocation?' 'ElementaryTypeName' 'Mapping' 'Expression?' 'FunctionTypeName' '( "^" ">=" ">" "<" "<=")' 'FunctionTypeNameMod' '( FunctionTypeNameMod)' '( FunctionTypeNameMod)*' '( "returns" TypeNameList)' '( "returns" TypeNameList)?' 'Statement' 'Statement*' 'IfStatement' 'WhileStatement' 'ForStatement' 'InlineAssemblyStatement' 'DoWhileStatement' 'PlaceholderStatement' 'Continue' 'Break' 'Return' 'Throw' 'SimpleStatement' '( DoWhileStatement PlaceholderStatement Continue Break Return Throw SimpleStatement)' 'ExpressionStatement' '( "else" Statement)' '( "else" Statement)?' 'VariableDefinition' '( SimpleStatement)' '( SimpleStatement)?' '( Expression)' '( Expression)?' '( ExpressionStatement)' '( ExpressionStatement)?' 'InlineAssemblyBlock' 'IdentifierList' '( "var" IdentifierList)' '( <identifier>? ",")' '( <identifier>? ",")*' '( "++" "--")' '( "," Expression?)' '( "," Expression?)+' '( Expression ( "," Expression?)+)' '( Expression ( Expression ( "," Expression?)+) ( "," Expression?)+)' '( "!" "~" "delete" "++" "--" "+" "-")' '( "*" "/" "%")' '( "+" "-")' '( "<<" ">>")' '( "<" ">" "<=" ">=")' '( "==" "!=")' '( "=" "|=" "^=" "&=" "<<=" ">>=" "+=" "-=" "*=" "/=" "%=")' 'Factor' 'OptionalMemberArrayAccess' 'OptionalFunctionCall' 'OptionalVariableDeclaration' '( OptionalFunctionCall OptionalVariableDeclaration)' '( OptionalFunctionCall OptionalVariableDeclaration)?' 'BooleanLiteral' 'NumberLiteral' 'Version' '( "." <idlist>)' '( "." <identifier>)' '( "[" Expression? "]")' '( ( "." <idlist>) ( "." <identifier>) ( "[" Expression? "]"))' '( ( "." <idlist>) ( "." <identifier>) ( "[" Expression? "]"))*' 'FunctionCallArguments' '( "(" FunctionCallArguments ")")' '( StorageLocation? <identifier>)' '( "," Expression)' '( "," Expression)*' 'B e g i n' '( <keypairid> Expression)' '( <keypairid> Expression)*' 'NameValueList' 'FunctionCallName' '( FunctionCallName)' 'NameValueList?' 'ExpressionList?' 'SourceUnit' '( <hexnumber> <decimalnumber>)' 'NumberUnit' '( NumberUnit)' '( NumberUnit)?' '( PragmaDirective ImportDirective ContractDefinition)*' '( PragmaDirective ImportDirective ContractDefinition)' 'ContractDefinition' 'ImportDirective' 'PragmaDirective' 'AssemblyItem' 'AssemblyItem*' 'FunctionalAssemblyExpression' 'AssemblyLocalBinding' 'AssemblyAssignment' 'AssemblyItem?' '( "," AssemblyItem)' '( "," AssemblyItem)*' 'E O F' 'error' '( "." <decimalnumber>)*' 'TypeName')