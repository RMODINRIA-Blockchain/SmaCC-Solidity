generated
symbolNames
	^ #('"-"' '"*"' '"/"' '"%"' '">>"' '"+"' '"|"' '"^"' '"&"' '"<<"' '"**"' '"++"' '">="' '"pragma"' '";"' '"import"' '"as"' '"("' '"=:"' '"delete"' '"!"' '"~"' '"["' '">"' '"--"' '"from"' '"|="' '"^="' '"&="' '"<<="' '","' '"="' '")"' '"constant"' '"internal"' '"else"' '">>="' '"+="' '"."' '"&&"' '"=="' '"!="' '"<"' '"?"' '"||"' '"*="' '"/="' '"%="' '":"' '"<="' '"-="' '"{"' '"var"' '"new"' '"wei"' '"szabo"' '"}"' '"throw"' '"assembly"' '"do"' '"continue"' '"break"' '"finney"' '"ether"' '"_"' '"bool"' '"string"' '"let"' '":="' '"years"' '"address"' '"minutes"' '"hours"' '"days"' '"weeks"' '"return"' '"seconds"' '"while"' '"using"' '"for"' '"struct"' '"modifier"' '"public"' '"if"' '"contract"' '"library"' '"interface"' '"is"' '"function"' '"private"' '"returns"' '"payable"' '"=>"' '"memory"' '"storage"' '"mapping"' '"]"' '"indexed"' '"event"' '"external"' '"enum"' '"anonymous"' '<byte>' '<int>' '<uint>' '<stringLiteral>' '<decimalnumber>' '<hexnumber>' '<realnumber>' '<hexliteral>' '<booleanliteral>' '<fixed>' '<ufixed>' '<identifier>' '<nestedids>' '<whitespace>' '<comment>' '( Version)*' '( "^" ">=" ">" "<" "<=" "~")' '( ( "^" ">=" ">" "<" "<=" "~"))' '( ( "^" ">=" ">" "<" "<=" "~"))?' 'Version' 'ContractDefinition' '( <decimalnumber> <realnumber>)' '( "." ( <decimalnumber> <realnumber>))' '( "." ( <decimalnumber> <realnumber>))*' 'ImportDirective' '( "as" <identifier>)' '( "as" <identifier>)?' '( "*" <identifier>)' '( "," <identifier> ( "as" <identifier>)?)' '( "," <identifier> ( "as" <identifier>)?)*' '( "contract" "library" "interface")' 'InheritanceSpecifier' '( "," InheritanceSpecifier)' '( "," InheritanceSpecifier)*' '( "is" InheritanceSpecifier ( "," InheritanceSpecifier)*)' '( "is" InheritanceSpecifier ( "," InheritanceSpecifier)*)?' '( ContractPart)' '( ContractPart)*' 'StateVariableDeclaration' 'UsingForDeclaration' 'StructDefinition' 'ModifierDefinition' 'FunctionDefinition' 'EventDefinition' 'EnumDefinition' 'UserDefinedTypeName' 'ExpressionList' '( "(" ExpressionList ")")' '( "(" ExpressionList ")")?' 'TypeName' 'StateVariableDeclarationMod' '( StateVariableDeclarationMod)' '( StateVariableDeclarationMod)?' '( "=" Expression)' 'PragmaDirective' '( "*" TypeName)' 'VariableDeclaration' '( VariableDeclaration ";")' '( VariableDeclaration ";")*' '( VariableDeclaration ";" ( VariableDeclaration ";")*)' '( VariableDeclaration ";" ( VariableDeclaration ";")*)?' 'ParameterList' '( ParameterList)' '( ParameterList)?' 'Block' 'FunctionDefinitionMod' '( FunctionDefinitionMod)' '( FunctionDefinitionMod)*' '( "returns" ParameterList)' '( "returns" ParameterList)?' '( ";" Block)' 'FunctionCall' 'IndexedParameterList' '"anonymous"?' 'EnumValue' '( EnumValue)' '( EnumValue)?' '( "," EnumValue)' '( "," EnumValue)*' '"indexed"?' '<identifier>?' '( "," TypeName "indexed"? <identifier>?)' '( "," TypeName "indexed"? <identifier>?)*' '( TypeName "indexed"? <identifier>? ( "," TypeName "indexed"? <identifier>?)*)' '( TypeName "indexed"? <identifier>? ( "," TypeName "indexed"? <identifier>?)*)?' 'StorageLocation' '( StorageLocation)' '( StorageLocation)?' '( "," TypeName ( StorageLocation)? <identifier>?)' '( "," TypeName ( StorageLocation)? <identifier>?)*' '( TypeName ( StorageLocation)? <identifier>? ( "," TypeName ( StorageLocation)? <identifier>?)*)' '( TypeName ( StorageLocation)? <identifier>? ( "," TypeName ( StorageLocation)? <identifier>?)*)?' 'TypeNameList' 'ElementaryTypeName' 'Mapping' '( Expression)' '( Expression)?' 'FunctionTypeName' 'B e g i n' 'FunctionTypeNameMod' '( FunctionTypeNameMod)' '( FunctionTypeNameMod)*' '( "returns" TypeNameList)' '( "returns" TypeNameList)?' '( Statement)' '( Statement)*' 'IfStatement' 'WhileStatement' 'ForStatement' 'InlineAssemblyStatement' 'DoWhileStatement' 'PlaceholderStatement' 'Continue' 'Break' 'Return' 'Throw' 'VariableDefinition' '( DoWhileStatement PlaceholderStatement Continue Break Return Throw VariableDefinition Expression)' '( "else" Statement)' '( "else" Statement)?' 'SimpleStatement' '( SimpleStatement)' '( SimpleStatement)?' '( ExpressionList)' '( ExpressionList)?' '<stringliteral>' '<stringliteral>?' 'InlineAssemblyBlock' 'IdentifierList' '( "var" IdentifierList)' '( <identifier>? ",")' '( <identifier>? ",")*' '( "++" "--")' 'ParenthesisExpressionFollowup' '( ParenthesisExpressionFollowup)' '( ParenthesisExpressionFollowup)?' '( "!" "~" "delete" "++" "--" "+" "-")' '( "*" "/" "%")' '( "+" "-")' '( "<<" ">>")' '( "<" ">" "<=" ">=")' '( "==" "!=")' '( "=" "|=" "^=" "&=" "<<=" ">>=" "+=" "-=" "*=" "/=" "%=")' 'TupleExpression' 'TermExpression' 'OptionalMemberArrayAccess' 'OptionalFunctionCall' 'OptionalVariableDeclaration' '( OptionalFunctionCall OptionalVariableDeclaration)' '( OptionalFunctionCall OptionalVariableDeclaration)?' '( "." TermExpression)' '( TermExpression)' '( TermExpression)?' '( OptionalFunctionCall ( TermExpression)?)' '( "[" Expression "]" ( TermExpression)?)' '( ( "." TermExpression) ( OptionalFunctionCall ( TermExpression)?) ( "[" Expression "]" ( TermExpression)?))' '( ( "." TermExpression) ( OptionalFunctionCall ( TermExpression)?) ( "[" Expression "]" ( TermExpression)?))?' '( SourceUnit)*' 'NumberLiteral' '( SourceUnit)' '( "." <nestedids>)' '( "." <identifier>)' '( "[" ( Expression)? "]")' '( ( "." <nestedids>) ( "." <identifier>) ( "[" ( Expression)? "]"))' '( ( "." <nestedids>) ( "." <identifier>) ( "[" ( Expression)? "]"))*' 'FunctionCallArguments' '( "(" FunctionCallArguments ")")' '( ( StorageLocation)? <identifier>)' '( "," Expression)' '( "," Expression)*' '( "," <identifier> ":" Expression)' '( "," <identifier> ":" Expression)*' '( ",")' '( ",")?' 'NameValueList' 'FunctionCallName' '( FunctionCallName)' '( NameValueList)' '( NameValueList)?' 'SourceUnit' '( <realnumber> <hexnumber> <decimalnumber>)' 'NumberUnit' '( NumberUnit)' '( NumberUnit)?' '( "," ( Expression)?)' '( "," ( Expression)?)*' '( Expression ( "," ( Expression)?)*)' '( Expression ( "," ( Expression)?)*)?' '( "," ( Expression)?)+' 'Factor' 'Expression' 'Statement' 'ContractPart' 'RootSourceSol' 'AssemblyItem' '( AssemblyItem)' '( AssemblyItem)*' 'FunctionalAssemblyExpression' 'AssemblyLocalBinding' 'AssemblyAssignment' 'AssemblyLabel' 'AssemblyValue' '( FunctionalAssemblyExpression <identifier> AssemblyValue)' '( <identifier> AssemblyValue)' '( AssemblyItem)?' '( "," AssemblyItem)' '( "," AssemblyItem)*' 'E O F' 'error' '( Version)' '( "=" Expression)?')