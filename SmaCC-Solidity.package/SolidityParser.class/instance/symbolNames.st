generated
symbolNames
	^ #('"/"' '"%"' '"**"' '"++"' '"-"' '"*"' '"--"' '"^"' '"&"' '"<<"' '">>"' '"+"' '"delete"' '"wei"' '"szabo"' '"finney"' '"ether"' '"pragma"' '"=:"' '">="' '"!"' '"~"' '"("' '"["' '"."' '"|"' '"seconds"' '"^="' '"&="' '"<<="' '">>="' '"="' '"|="' '"+="' '")"' '"constant"' '"internal"' '"else"' '","' '"-="' '"=="' '"!="' '"<"' '"<="' '"||"' '"&&"' '">"' '"*="' '"/="' '"%="' '":"' '"?"' '";"' '"minutes"' '"constructor"' '"function"' '"returns"' '"indexed"' '"string"' '"var"' '"if"' '"mapping"' '"=>"' '"]"' '"address"' '"hours"' '"while"' '"emit"' '"new"' '"let"' '":="' '"return"' '"throw"' '"bool"' '"_"' '"assembly"' '"do"' '"continue"' '"break"' '"for"' '"using"' '"}"' '"contract"' '"library"' '"interface"' '"struct"' '"{"' '"is"' '"days"' '"weeks"' '"years"' '"import"' '"as"' '"from"' '"modifier"' '"event"' '"pure"' '"enum"' '"anonymous"' '"storage"' '"memory"' '"view"' '"payable"' '"public"' '"private"' '"external"' '<byte>' '<int>' '<uint>' '<stringLiteral>' '<decimalnumber>' '<hexnumber>' '<realnumber>' '<hexliteral>' '<booleanliteral>' '<fixed>' '<ufixed>' '<identifier>' '<nestedids>' '<whitespace>' '<comment>' '( Version ''version'')*' 'LiteralString' 'LiteralHexa' 'LiteralNumber' 'LiteralBoolean' 'Literal' 'LiteralIdentifier' 'Version' 'LiteralNestedIdentifier' 'ContractDefinition' 'LiteralHexaString' 'LiteralHexaNumber' 'ImportDirective' 'PragmaDirective' 'LiteralDecimalNumber' 'LiteralRealNumber' 'LiteralEtherAmount' 'B e g i n' '( Source_Unit ''sourceunit'')*' '( Source_Unit ''sourceunit'')' 'LiteralUnit' '( LiteralDecimalNumber LiteralRealNumber LiteralRealNumber)' '( "^" ">=" ">" "<" "<=" "~")' '( ( "^" ">=" ">" "<" "<=" "~") ''version_op'')' '( ( "^" ">=" ">" "<" "<=" "~") ''version_op'')?' '( <decimalnumber> <realnumber>)' '( "." ( <decimalnumber> <realnumber>) ''number'')' '( "." ( <decimalnumber> <realnumber>) ''number'')*' '( "as" LiteralIdentifier ''alias'')' '( "as" LiteralIdentifier ''alias'')?' '( "*" ''all'' LiteralIdentifier ''component_id'')' '( "," LiteralIdentifier ''component_id'' ( "as" LiteralIdentifier ''alias'')?)' '( "," LiteralIdentifier ''component_id'' ( "as" LiteralIdentifier ''alias'')?)*' '( "contract" "library" "interface")' 'InheritanceSpecifier' '( "," InheritanceSpecifier ''inheritance'')' '( "," InheritanceSpecifier ''inheritance'')*' '( "is" InheritanceSpecifier ''inheritance'' ( "," InheritanceSpecifier ''inheritance'')*)' '( "is" InheritanceSpecifier ''inheritance'' ( "," InheritanceSpecifier ''inheritance'')*)?' '( ContractPart ''contract_source'')' '( ContractPart ''contract_source'')*' 'StateVariableDeclaration' 'UsingForDeclaration' 'StructDefinition' 'UserModifierDefinition' 'ConstructorDefinition' 'FunctionDefinition' 'EventDefinition' 'EnumDefinition' 'UserDefinedTypeName' 'ExpressionList' '( "(" ExpressionList ''exp_list'' ")")' '( "(" ExpressionList ''exp_list'' ")")?' '( "constant" "pure" "view")' 'ModifierFunctionImmuable' 'ModifierFunctionPayable' '( "public" "private")' 'ModifierPrivacy' '( "internal" "external")' 'ModifierVisibility' 'ModifierStateVariableVisibility' 'UserModifierInvocation' 'ModifierFunctionDefinition' 'Source_Unit' '( "memory" "storage")' 'ModifierStorage' 'ParameterList' '( ParameterList ''param_list'')' '( ParameterList ''param_list'')?' 'Block' '( ExpressionList ''exp_list'')' '( ExpressionList ''exp_list'')?' '( "(" ( ExpressionList ''exp_list'')? ")")' '( "(" ( ExpressionList ''exp_list'')? ")")?' 'IndexedParameterList' '"anonymous"?' 'EnumValue' '( EnumValue ''enum_value_id'')' '( EnumValue ''enum_value_id'')?' '( "," EnumValue ''enum_value_id'')' '( "," EnumValue ''enum_value_id'')*' 'VariableDeclaration' '( VariableDeclaration ''struct_var_dec'' ";")' '( VariableDeclaration ''struct_var_dec'' ";")*' '( VariableDeclaration ''struct_var_dec'' ";" ( VariableDeclaration ''struct_var_dec'' ";")*)' '( VariableDeclaration ''struct_var_dec'' ";" ( VariableDeclaration ''struct_var_dec'' ";")*)?' 'TypeName' '( "*" ''all'' TypeName ''type'')' 'ElementaryTypeName' 'Mapping' '( Expression ''exp'')' '( Expression ''exp'')?' 'FunctionTypeName' 'Factor' 'Expression' 'Statement' 'ContractPart' 'RootSourceSol' '( ModifierStorage ''storage_loc'')' '( ModifierStorage ''storage_loc'')?' 'IdentifierList' '( "var" IdentifierList ''var_id_list'')' '( "=" Expression ''assign_exp'')' '( "=" Expression ''assign_exp'')?' 'VariableDefinition' '( StateVariableDeclarationMod ''modifier'')' '( StateVariableDeclarationMod ''modifier'')?' '( "=" Expression ''exp'')' '( "=" Expression ''exp'')?' 'ConstructorModifier' '( ConstructorModifier ''modifier'')' '( ConstructorModifier ''modifier'')*' 'ConstructorVisibilityModifier' '( LiteralIdentifier ''identifier'')' '( LiteralIdentifier ''identifier'')?' '( "," TypeName ''type'' ( ModifierStorage ''storage_loc'')? ( LiteralIdentifier ''identifier'')?)' '( "," TypeName ''type'' ( ModifierStorage ''storage_loc'')? ( LiteralIdentifier ''identifier'')?)*' '( TypeName ''type'' ( ModifierStorage ''storage_loc'')? ( LiteralIdentifier ''identifier'')? ( "," TypeName ''type'' ( ModifierStorage ''storage_loc'')? ( LiteralIdentifier ''identifier'')?)*)' '( TypeName ''type'' ( ModifierStorage ''storage_loc'')? ( LiteralIdentifier ''identifier'')? ( "," TypeName ''type'' ( ModifierStorage ''storage_loc'')? ( LiteralIdentifier ''identifier'')?)*)?' 'TypeNameList' '( ModifierVisibility ModifierFunctionImmuable ModifierFunctionPayable)' '( ( ModifierVisibility ModifierFunctionImmuable ModifierFunctionPayable) ''modifier'')' '( ( ModifierVisibility ModifierFunctionImmuable ModifierFunctionPayable) ''modifier'')*' '( "returns" TypeNameList ''returned_types'')' '( "returns" TypeNameList ''returned_types'')?' '( ModifierFunctionDefinition ''modifier'')' '( ModifierFunctionDefinition ''modifier'')*' '( "returns" ParameterList ''returned_types'')' '( "returns" ParameterList ''returned_types'')?' '( ";" Block ''block'')' '"indexed"?' 'IndexedParameter' '( "," IndexedParameter ''parameter'')' '( "," IndexedParameter ''parameter'')*' '( IndexedParameter ''parameter'' ( "," IndexedParameter ''parameter'')*)' '( IndexedParameter ''parameter'' ( "," IndexedParameter ''parameter'')*)?' 'Parameter' '( "," Parameter ''parameter'')' '( "," Parameter ''parameter'')*' '( Parameter ''parameter'' ( "," Parameter ''parameter'')*)' '( Parameter ''parameter'' ( "," Parameter ''parameter'')*)?' '( Statement ''statement'')' '( Statement ''statement'')*' 'IfStatement' 'WhileStatement' 'ForStatement' 'InlineAssemblyStatement' 'DoWhileStatement' 'PlaceholderStatement' 'Continue' 'Break' 'Return' 'Throw' 'SimpleStatement' 'Emit' '( DoWhileStatement PlaceholderStatement Continue Break Return Throw SimpleStatement Emit)' '( "else" Statement ''else_statement'')' '( "else" Statement ''else_statement'')?' '( SimpleStatement ''initialization'')' '( SimpleStatement ''initialization'')?' '( Expression ''exp_test'')' '( Expression ''exp_test'')?' '( ExpressionList ''increment_list'')' '( ExpressionList ''increment_list'')?' '( LiteralString ''value'')' '( LiteralString ''value'')?' 'InlineAssemblyBlock' '( Expression ''returned_exp'')' '( Expression ''returned_exp'')?' 'FunctionCall' '( ( LiteralIdentifier ''identifier'')? ",")' '( ( LiteralIdentifier ''identifier'')? ",")*' 'OperationPostfix' 'OperationPrefix' 'OperationsUnary' '( "++" "--")' '( "!" "~" "delete" "++" "--" "+" "-")' 'ParenthesisExpressionFollowup' '( ParenthesisExpressionFollowup ''follow_exp'')' '( ParenthesisExpressionFollowup ''follow_exp'')?' 'ExpressionParenthesis' 'OperationPower' 'OperationMultiplication' 'OperationDivision' 'OperationModule' 'OperationAddition' 'OperationSubstraction' 'OperationArithmetic' 'OperationBitShift' 'OperationBitAnd' 'OperationBitXor' 'OperationBitOr' 'OperationBit' '( "<<" ">>")' 'OperationCompare' 'OperationEquals' 'OperationNotEquals' 'OperationAnd' 'OperationOr' 'OperationTernary' 'OperationComparingLogic' '( "<" ">" "<=" ">=")' '( "=" "|=" "^=" "&=" "<<=" ">>=" "+=" "-=" "*=" "/=" "%=")' 'OperationAssign' 'NewExpression' 'IndexAccessExpression' 'MemberAccess' 'TupleExpression' 'Term' 'IndexAccess' '( IndexAccess ''index'')' '( IndexAccess ''index'')*' 'SimpleTerm' '( LiteralIdentifier ''variable_dec'')' '( Expression ''index'')' '( Expression ''index'')?' 'FunctionCallArguments' 'NameValueList' '( NameValueList ''name_value_list'')' '( NameValueList ''name_value_list'')?' '( "," Expression ''exp'')' '( "," Expression ''exp'')*' '( "," LiteralIdentifier ''id'' ":" Expression ''exp'')' '( "," LiteralIdentifier ''id'' ":" Expression ''exp'')*' '( ",")' '( ",")?' '( "," ( Expression ''exp'')?)' '( "," ( Expression ''exp'')?)*' '( Expression ''exp'' ( "," ( Expression ''exp'')?)*)' '( Expression ''exp'' ( "," ( Expression ''exp'')?)*)?' '( "," ( Expression ''exp'')?)+' 'AssemblyItem' '( AssemblyItem ''asm_item'')' '( AssemblyItem ''asm_item'')*' 'FunctionalAssemblyExpression' 'AssemblyLocalBinding' 'AssemblyAssignment' 'AssemblyLabel' 'AssemblyValue' '( FunctionalAssemblyExpression ''functional_asm_exp'' LiteralIdentifier ''identifier'' AssemblyValue ''asm_value'')' '( FunctionalAssemblyExpression ''functional_asm_exp'' LiteralIdentifier ''value'' AssemblyValue ''asm_value'')' '( LiteralIdentifier ''value'' AssemblyValue ''asm_value'')' '( AssemblyItem ''asm_item'')?' '( "," AssemblyItem ''asm_item'')' '( "," AssemblyItem ''asm_item'')*' 'E O F' 'error' '( Version ''version'')' 'StateVariableDeclarationMod')